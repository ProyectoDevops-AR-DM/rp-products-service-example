name: CI Build and Deploy

on:
  push:
    branches:
      - main
      - develop
      - release

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        branch: [main, develop, release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '11'

      - name: Build with Maven
        run: mvn clean package

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        branch: [main, develop, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Install SonarScanner
        run: npm install -g sonar-scanner

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.java.binaries=target/classes

  build_and_deploy_dockerhub:
    runs-on: ubuntu-latest
    needs: [sonarcloud, build]
    strategy:
      matrix:
        branch: [main, develop, release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_USERNAME }}/orders-service-example-${{ matrix.branch }}:latest

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/orders-service-example-${{ matrix.branch }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_deploy_dockerhub
    strategy:
      matrix:
        branch: [main, develop, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name eks-proyectodevops-${{ matrix.branch }} --region ${{ secrets.AWS_REGION }}

      - name: Validate deployment YAML
        run: kubectl apply -f ./orders-service-deployment-${{ matrix.branch }}.yaml --dry-run=client

      - name: Deploy to Kubernetes
        run: kubectl apply -f ./orders-service-deployment-${{ matrix.branch }}.yaml
        
      - name: Test API Endpoint
        run: |
          sleep 30
          curl http://<Ip-ambiente-${{ matrix.branch }}> /products
