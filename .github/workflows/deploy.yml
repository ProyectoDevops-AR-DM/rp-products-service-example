name: Build, Push Docker Image and Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: List target directory
        run: ls -la target

      - name: Verify JAR file
        run: |
          if [ ! -f target/products-service-example-0.0.1-SNAPSHOT-spring-boot.jar ]; then
            echo "JAR file not found!"
            exit 1
          fi

  docker:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

      - name: Test Docker image
        run: docker run --rm ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name eks-proyectodevops --region ${{ secrets.AWS_REGION }}

      - name: Validate deployment YAML
        run: kubectl apply -f ./products-service-deployment.yaml --dry-run=client

      - name: Deploy to Kubernetes
        run: kubectl apply -f ./products-service-deployment.yaml

      - name: Check deployment status
        run: kubectl rollout status deployment/products-service-deployment

      - name: Test API Endpoint
        run: |
          sleep 30
          EXTERNAL_IP=$(kubectl get svc products-service-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl http://$EXTERNAL_IP/products
