name: Build, SonarCloud, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - main  # Ejecutar el workflow cuando haya un push a la rama main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Obtener el código del repositorio

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'  # Puedes usar 'adopt', 'zulu', 'temurin', etc.
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package  # Construir el proyecto Java con Maven

  sonarcloud:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.19.1'

      - name: Install dependencies
        run: npm install

      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install SonarScanner
        run: npm install -g sonar-scanner

      - name: Run SonarCloud analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  docker:
    runs-on: ubuntu-latest
    needs: sonarcloud

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

  deploy:
    runs-on: ubuntu-latest
    needs: docker  # Este trabajo se ejecutará solo si el trabajo de docker tiene éxito

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Obtener el código del repositorio

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Utiliza el token de sesión si es necesario para tu configuración

      - name: Set up Kubernetes CLI
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'  # Puedes especificar una versión en lugar de 'latest' para asegurar la compatibilidad futura

      - name: Configure kubectl
        run: aws eks update-kubeconfig --name eks-proyectodevops --region ${{ secrets.AWS_REGION }}
        # Actualiza el archivo kubeconfig con la configuración del cluster EKS

      - name: Validate deployment YAML
        run: kubectl apply -f ./products-service-deployment.yaml --dry-run=client
        # Valida el archivo de despliegue antes de aplicarlo

      - name: Deploy to Kubernetes
        run: kubectl apply -f ./products-service-deployment.yaml
        # Aplica el archivo de despliegue a Kubernetes

      - name: Check deployment status
        run: kubectl rollout status deployment/products-service-deployment
        # Verifica el estado del despliegue
