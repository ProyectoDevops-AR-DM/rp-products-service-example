name: Build, Analyze, Push and Deploy to Kubernetes

on:
  push:
    branches:
      - main  # Ejecutar el workflow cuando haya un push a la rama main

jobs:
  build-analyze-and-push:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Obtener el código del repositorio

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: 'temurin'  # Puedes usar 'adopt', 'zulu', 'temurin', etc.
        java-version: '11'

    - name: Build with Maven
      run: mvn clean package  # Construir el proyecto Java con Maven

    - name: Install Sonar Scanner
      run: |
        sudo apt-get update
        sudo apt-get install -y openjdk-11-jre
        curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
        unzip sonar-scanner.zip
        sudo mv sonar-scanner-4.6.2.2472-linux /opt/sonar-scanner
        sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

    - name: Run SonarCloud analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner \
          -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
          -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${{ secrets.SONAR_TOKEN }} -X

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build Docker image
      run: docker build . -t ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

    - name: Push Docker image
      run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/products-service-example:latest

  deploy:
    runs-on: ubuntu-latest  # Utilizar la última versión de Ubuntu para el runner
    needs: build-analyze-and-push  # Este trabajo se ejecutará solo si build-and-push tiene éxito
    steps:
    - name: Checkout code
      uses: actions/checkout@v2  # Obtener el código del repositorio

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}  # Utiliza el token de sesión si es necesario para tu configuración

    - name: Set up Kubernetes CLI
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'  # Puedes especificar una versión en lugar de 'latest' para asegurar la compatibilidad futura

    - name: Configure kubectl
      run: aws eks update-kubeconfig --name eks-proyectodevops --region ${{ secrets.AWS_REGION }}
      # Actualiza el archivo kubeconfig con la configuración del cluster EKS

    - name: Validate deployment YAML
      run: kubectl apply -f ./products-service-deployment.yaml --dry-run=client
      # Valida el archivo de despliegue antes de aplicarlo

    - name: Deploy to Kubernetes
      run: kubectl apply -f ./products-service-deployment.yaml
      # Aplica el archivo de despliegue a Kubernetes

    - name: Check deployment status
      run: kubectl rollout status deployment/products-service-deployment
      # Verifica el estado del despliegue
